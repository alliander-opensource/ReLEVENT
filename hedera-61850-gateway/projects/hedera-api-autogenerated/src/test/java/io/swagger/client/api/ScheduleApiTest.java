/*
 * Hedera - Hub for Energy Distribution and Excess Resource Allocation
 * <h2>Intended use</h2> <p>   This api is intended to be used by Market Participants who have a contract with the Grid Operator to receive additional capacity.    Schedules can be requested to receive capacity that can be used by the Market Participant. Once schedule with the provisioned capacity   is acquired the Market Participant is expected to live within those set point boundaries. If the Market Participant comes to the conclusion   that he needs more or less capacity he can updated his requested schedule. If the schedule is no longer required it is expected that the Market Participant   removes it. </p>  <h2>Authentication</h2> <p>   The api is secured with OAuth2. Once a contract is provided to the Market Participant credentials of grant type \"client_credentials\" will be provided.    The <strong>client_id</strong> and <strong>client_secret</strong> can be used to authenticate with <a href=\"https://auth.hedera.alliander.com/\">auth.hedera.alliander.com</a>. The bearer token can then be used in the Authentication header as follows <code>Authorization: Bearer &lt;token&gt;</code>. </p>  <h2>Versioning</h2> <p>   This API implements <b>MediaType-based</b> versioning. To request a specific version use the accept header, for example:   <code>Accept: application/vnd.hedera.v1+json</code>. If no version is specified you will request the latest version automatically.    Be aware that not providing a version can cause issues when breaking changes are released in the new version and is therefore not recommended.    When using and older version of the API you will received a Sunset header giving an indication of when support for that version will be removed in the future. </p>  <h2>Non breaking changes</h2> <p>   Within the current major version it is allowed to make non breaking changes in the same major version of the api. Non breaking changed are defined as follows: </p> <ul>   <li>Adding a endpoint</li>   <li>Adding a resource</li>   <li>Adding a optional field to a existing resource</li>   <li>Adding a parameter to a endpoint</li>   <li>Adding enums to fields that have a fallback (default) value</li> </ul>  <h2>Connectivity issues</h2> <p>   When experiencing connection problems with Hedera it is expected that the Market Participant falls back to its Firm Capacity specified in the contract with the Grid Operator. Reasoning behind this is that if we can not communicate anymore we run the risk of overloading the grid capacity limits. The grid must be protected and be as stable as possible at all times and when communication is not possible every Market Participant needs to fallback to its Firm Capacity limits. </p> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@hedera.alliander.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ClientError;
import io.swagger.client.model.NotAcceptable;
import io.swagger.client.model.ScheduleGetResponse;
import io.swagger.client.model.SchedulePostResponse;
import io.swagger.client.model.SchedulePutResponse;
import io.swagger.client.model.ScheduleRequest;
import io.swagger.client.model.ServerError;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ScheduleApi
 */
@Ignore
public class ScheduleApiTest {

    private final ScheduleApi api = new ScheduleApi();

    /**
     * 
     *
     * Cancels a schedule request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scheduleMRIDDeleteTest() throws Exception {
        UUID mRID = null;
        String accept = null;
        api.scheduleMRIDDelete(mRID, accept);

        // TODO: test validations
    }
    /**
     * 
     *
     * Provides a schedule based on a previous schedule request. All registeredInterTies must respect all constraints of their parent RegisteredInterTies. Please note that there could be more RegisteredInterTies levels supplied in the response than requested in the schedule request. Reasoning behind this is the physical grid could be split where RegisteredInterTies could be divided into different physical network segments thus resulting in more constraints that need to be applied. You are always guaranteed to receive at least the same RegisteredInterTies as the request you made.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scheduleMRIDGetTest() throws Exception {
        UUID mRID = null;
        String accept = null;
        ScheduleGetResponse response = api.scheduleMRIDGet(mRID, accept);

        // TODO: test validations
    }
    /**
     * 
     *
     * Currently not implemented and will return a 501. Used to update an existing schedule.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scheduleMRIDPutTest() throws Exception {
        String accept = null;
        UUID mRID = null;
        ScheduleRequest body = null;
        SchedulePutResponse response = api.scheduleMRIDPut(accept, mRID, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Used to request a new schedule for given RegisteredInterTies. Given RegisteredInterTies must be within the same contract. You can only request a schedule for maximum of 1 day. And you can not request schedules for more than 2 days in advance. Only one schedule can be requested for a period in time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void schedulePostTest() throws Exception {
        String accept = null;
        ScheduleRequest body = null;
        SchedulePostResponse response = api.schedulePost(accept, body);

        // TODO: test validations
    }
}
