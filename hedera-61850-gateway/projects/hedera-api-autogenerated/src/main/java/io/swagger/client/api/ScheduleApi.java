/*
 * Hedera - Hub for Energy Distribution and Excess Resource Allocation
 * <h2>Intended use</h2> <p>   This api is intended to be used by Market Participants who have a contract with the Grid Operator to receive additional capacity.    Schedules can be requested to receive capacity that can be used by the Market Participant. Once schedule with the provisioned capacity   is acquired the Market Participant is expected to live within those set point boundaries. If the Market Participant comes to the conclusion   that he needs more or less capacity he can updated his requested schedule. If the schedule is no longer required it is expected that the Market Participant   removes it. </p>  <h2>Authentication</h2> <p>   The api is secured with OAuth2. Once a contract is provided to the Market Participant credentials of grant type \"client_credentials\" will be provided.    The <strong>client_id</strong> and <strong>client_secret</strong> can be used to authenticate with <a href=\"https://auth.hedera.alliander.com/\">auth.hedera.alliander.com</a>. The bearer token can then be used in the Authentication header as follows <code>Authorization: Bearer &lt;token&gt;</code>. </p>  <h2>Versioning</h2> <p>   This API implements <b>MediaType-based</b> versioning. To request a specific version use the accept header, for example:   <code>Accept: application/vnd.hedera.v1+json</code>. If no version is specified you will request the latest version automatically.    Be aware that not providing a version can cause issues when breaking changes are released in the new version and is therefore not recommended.    When using and older version of the API you will received a Sunset header giving an indication of when support for that version will be removed in the future. </p>  <h2>Non breaking changes</h2> <p>   Within the current major version it is allowed to make non breaking changes in the same major version of the api. Non breaking changed are defined as follows: </p> <ul>   <li>Adding a endpoint</li>   <li>Adding a resource</li>   <li>Adding a optional field to a existing resource</li>   <li>Adding a parameter to a endpoint</li>   <li>Adding enums to fields that have a fallback (default) value</li> </ul>  <h2>Connectivity issues</h2> <p>   When experiencing connection problems with Hedera it is expected that the Market Participant falls back to its Firm Capacity specified in the contract with the Grid Operator. Reasoning behind this is that if we can not communicate anymore we run the risk of overloading the grid capacity limits. The grid must be protected and be as stable as possible at all times and when communication is not possible every Market Participant needs to fallback to its Firm Capacity limits. </p> 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@hedera.alliander.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClientError;
import io.swagger.client.model.NotAcceptable;
import io.swagger.client.model.ScheduleGetResponse;
import io.swagger.client.model.SchedulePostResponse;
import io.swagger.client.model.SchedulePutResponse;
import io.swagger.client.model.ScheduleRequest;
import io.swagger.client.model.ServerError;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduleApi {
    private ApiClient apiClient;

    public ScheduleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for scheduleMRIDDelete
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDDeleteCall(UUID mRID, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/schedule/{mRID}"
            .replaceAll("\\{" + "mRID" + "\\}", apiClient.escapeString(mRID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduleMRIDDeleteValidateBeforeCall(UUID mRID, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mRID' is set
        if (mRID == null) {
            throw new ApiException("Missing the required parameter 'mRID' when calling scheduleMRIDDelete(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling scheduleMRIDDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = scheduleMRIDDeleteCall(mRID, accept, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Cancels a schedule request.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void scheduleMRIDDelete(UUID mRID, String accept) throws ApiException {
        scheduleMRIDDeleteWithHttpInfo(mRID, accept);
    }

    /**
     * 
     * Cancels a schedule request.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> scheduleMRIDDeleteWithHttpInfo(UUID mRID, String accept) throws ApiException {
        com.squareup.okhttp.Call call = scheduleMRIDDeleteValidateBeforeCall(mRID, accept, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Cancels a schedule request.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDDeleteAsync(UUID mRID, String accept, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduleMRIDDeleteValidateBeforeCall(mRID, accept, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for scheduleMRIDGet
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDGetCall(UUID mRID, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/schedule/{mRID}"
            .replaceAll("\\{" + "mRID" + "\\}", apiClient.escapeString(mRID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduleMRIDGetValidateBeforeCall(UUID mRID, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'mRID' is set
        if (mRID == null) {
            throw new ApiException("Missing the required parameter 'mRID' when calling scheduleMRIDGet(Async)");
        }
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling scheduleMRIDGet(Async)");
        }
        
        com.squareup.okhttp.Call call = scheduleMRIDGetCall(mRID, accept, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Provides a schedule based on a previous schedule request. All registeredInterTies must respect all constraints of their parent RegisteredInterTies. Please note that there could be more RegisteredInterTies levels supplied in the response than requested in the schedule request. Reasoning behind this is the physical grid could be split where RegisteredInterTies could be divided into different physical network segments thus resulting in more constraints that need to be applied. You are always guaranteed to receive at least the same RegisteredInterTies as the request you made.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @return ScheduleGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduleGetResponse scheduleMRIDGet(UUID mRID, String accept) throws ApiException {
        ApiResponse<ScheduleGetResponse> resp = scheduleMRIDGetWithHttpInfo(mRID, accept);
        return resp.getData();
    }

    /**
     * 
     * Provides a schedule based on a previous schedule request. All registeredInterTies must respect all constraints of their parent RegisteredInterTies. Please note that there could be more RegisteredInterTies levels supplied in the response than requested in the schedule request. Reasoning behind this is the physical grid could be split where RegisteredInterTies could be divided into different physical network segments thus resulting in more constraints that need to be applied. You are always guaranteed to receive at least the same RegisteredInterTies as the request you made.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @return ApiResponse&lt;ScheduleGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduleGetResponse> scheduleMRIDGetWithHttpInfo(UUID mRID, String accept) throws ApiException {
        com.squareup.okhttp.Call call = scheduleMRIDGetValidateBeforeCall(mRID, accept, null, null);
        Type localVarReturnType = new TypeToken<ScheduleGetResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides a schedule based on a previous schedule request. All registeredInterTies must respect all constraints of their parent RegisteredInterTies. Please note that there could be more RegisteredInterTies levels supplied in the response than requested in the schedule request. Reasoning behind this is the physical grid could be split where RegisteredInterTies could be divided into different physical network segments thus resulting in more constraints that need to be applied. You are always guaranteed to receive at least the same RegisteredInterTies as the request you made.
     * @param mRID  (required)
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDGetAsync(UUID mRID, String accept, final ApiCallback<ScheduleGetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduleMRIDGetValidateBeforeCall(mRID, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduleGetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduleMRIDPut
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param mRID  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDPutCall(String accept, UUID mRID, ScheduleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/schedule/{mRID}"
            .replaceAll("\\{" + "mRID" + "\\}", apiClient.escapeString(mRID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduleMRIDPutValidateBeforeCall(String accept, UUID mRID, ScheduleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling scheduleMRIDPut(Async)");
        }
        // verify the required parameter 'mRID' is set
        if (mRID == null) {
            throw new ApiException("Missing the required parameter 'mRID' when calling scheduleMRIDPut(Async)");
        }
        
        com.squareup.okhttp.Call call = scheduleMRIDPutCall(accept, mRID, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Currently not implemented and will return a 501. Used to update an existing schedule.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param mRID  (required)
     * @param body  (optional)
     * @return SchedulePutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchedulePutResponse scheduleMRIDPut(String accept, UUID mRID, ScheduleRequest body) throws ApiException {
        ApiResponse<SchedulePutResponse> resp = scheduleMRIDPutWithHttpInfo(accept, mRID, body);
        return resp.getData();
    }

    /**
     * 
     * Currently not implemented and will return a 501. Used to update an existing schedule.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param mRID  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SchedulePutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchedulePutResponse> scheduleMRIDPutWithHttpInfo(String accept, UUID mRID, ScheduleRequest body) throws ApiException {
        com.squareup.okhttp.Call call = scheduleMRIDPutValidateBeforeCall(accept, mRID, body, null, null);
        Type localVarReturnType = new TypeToken<SchedulePutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Currently not implemented and will return a 501. Used to update an existing schedule.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param mRID  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduleMRIDPutAsync(String accept, UUID mRID, ScheduleRequest body, final ApiCallback<SchedulePutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduleMRIDPutValidateBeforeCall(accept, mRID, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchedulePutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for schedulePost
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call schedulePostCall(String accept, ScheduleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/vnd.hedera.v1+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call schedulePostValidateBeforeCall(String accept, ScheduleRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling schedulePost(Async)");
        }
        
        com.squareup.okhttp.Call call = schedulePostCall(accept, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Used to request a new schedule for given RegisteredInterTies. Given RegisteredInterTies must be within the same contract. You can only request a schedule for maximum of 1 day. And you can not request schedules for more than 2 days in advance. Only one schedule can be requested for a period in time.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param body  (optional)
     * @return SchedulePostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SchedulePostResponse schedulePost(String accept, ScheduleRequest body) throws ApiException {
        ApiResponse<SchedulePostResponse> resp = schedulePostWithHttpInfo(accept, body);
        return resp.getData();
    }

    /**
     * 
     * Used to request a new schedule for given RegisteredInterTies. Given RegisteredInterTies must be within the same contract. You can only request a schedule for maximum of 1 day. And you can not request schedules for more than 2 days in advance. Only one schedule can be requested for a period in time.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;SchedulePostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SchedulePostResponse> schedulePostWithHttpInfo(String accept, ScheduleRequest body) throws ApiException {
        com.squareup.okhttp.Call call = schedulePostValidateBeforeCall(accept, body, null, null);
        Type localVarReturnType = new TypeToken<SchedulePostResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used to request a new schedule for given RegisteredInterTies. Given RegisteredInterTies must be within the same contract. You can only request a schedule for maximum of 1 day. And you can not request schedules for more than 2 days in advance. Only one schedule can be requested for a period in time.
     * @param accept The media type of the version you want to accept. Ex: application/vnd.hedera.v1+json. Not provided will result in a 406 response. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call schedulePostAsync(String accept, ScheduleRequest body, final ApiCallback<SchedulePostResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = schedulePostValidateBeforeCall(accept, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SchedulePostResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
